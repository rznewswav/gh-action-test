# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  submit-pr:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Authenticate GitHub CLI
        run: |
          echo ${{ github.token }} | gh auth login --with-token
          gh auth status

      - name: Merge master -> development
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: master
          target_branch: development
          github_token: ${{ github.token }}
          message: |
            [Bot] Merge master to development

      - name: (On fail merge) Push to active/new PR
        if: failure()
        run: |
          git checkout master

          headRefNames=$(gh pr list --base development --state open --json headRefName)
          new_branch_name=$(node -p -e "var headRefs=JSON.parse('$headRefNames'); headRefs.map(e => e.headRefName).find(e => e.startsWith('sync/master-dev-')) ?? '';")

          if [ $new_branch_name = '' ]
          then
            echo "No active PR found. Creating a new branch."
            new_branch_name="sync/master-dev-$(git rev-parse --short HEAD)"
            git checkout -b $new_branch_name
            git push -u origin $new_branch_name
            last_commit_message=$(git log -1 --pretty=format:%s)
            gh pr create \
              --base development \
              --title "Dev Sync: $last_commit_message" \
              --body "This PR is automatically generated to sync master codebase with the development codebase. A silent merge could not be made because there is a merge conflict."
          else
            echo "Current dev sync PR found. Force repushing to $new_branch_name"
            git checkout -b $new_branch_name
            git push --force -u origin $new_branch_name
          fi


